# Generated by Django 2.0 on 2019-02-03 15:49

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('nick_name', models.CharField(max_length=50, verbose_name='昵称')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('image', models.ImageField(default='image/default.png', upload_to='image/%Y/%m', verbose_name='头像')),
                ('models_introdoction', models.TextField(max_length=128)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_approver', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户信息',
                'verbose_name_plural': '用户信息',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AddFileModel',
            fields=[
                ('nid', models.BigAutoField(primary_key=True, serialize=False)),
                ('models_Filename', models.CharField(default='', max_length=20, verbose_name='文件名称')),
                ('models_Filedes', models.TextField(default='', verbose_name='描述')),
                ('read_count', models.IntegerField(default=0)),
                ('models_Fileupload', models.FileField(max_length=1000, upload_to='file/%Y/%m', verbose_name='文件')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('models_Filetype_type_id', models.IntegerField(choices=[(1, '公开'), (2, '内部')], default=None, verbose_name='是否公开')),
            ],
            options={
                'verbose_name': '上传文件',
                'verbose_name_plural': '上传文件',
            },
        ),
        migrations.CreateModel(
            name='Dep',
            fields=[
                ('nid', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=64, verbose_name='部门')),
            ],
            options={
                'verbose_name_plural': '部门',
            },
        ),
        migrations.CreateModel(
            name='EmailVerifyRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, verbose_name='验证码')),
                ('email', models.EmailField(max_length=50, verbose_name='邮箱')),
                ('send_type', models.CharField(choices=[('register', '注册'), ('forget', '找回密码'), ('update_email', '修改邮箱')], max_length=20, verbose_name='验证码类型')),
                ('send_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='发送时间')),
            ],
            options={
                'verbose_name': '邮箱验证码',
                'verbose_name_plural': '邮箱验证码',
            },
        ),
        migrations.CreateModel(
            name='File2DepModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dep', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.Dep', verbose_name='部门')),
                ('file', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.AddFileModel', verbose_name='文件到部门')),
            ],
            options={
                'verbose_name_plural': '文件2部门',
            },
        ),
        migrations.CreateModel(
            name='FilePublic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.BooleanField(default=False, verbose_name='文件是否可以发布')),
                ('file', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.AddFileModel', verbose_name='文章到部门')),
            ],
        ),
        migrations.CreateModel(
            name='Process',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(1, '未处理'), (2, '处理中'), (3, '已审批')], default=1)),
                ('reject_reason', models.TextField(null=True)),
                ('process_time', models.DateTimeField(null=True)),
                ('approver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='p', to=settings.AUTH_USER_MODEL)),
                ('file', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='repository.AddFileModel')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectModel',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('Project_name', models.CharField(max_length=32, verbose_name='项目名称')),
            ],
            options={
                'verbose_name_plural': '项目',
            },
        ),
        migrations.CreateModel(
            name='U2D',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dep', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.Dep')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户所属部门')),
            ],
            options={
                'verbose_name_plural': '用户2部门',
            },
        ),
        migrations.AddField(
            model_name='addfilemodel',
            name='department',
            field=models.ManyToManyField(through='repository.File2DepModel', to='repository.Dep'),
        ),
        migrations.AddField(
            model_name='addfilemodel',
            name='models_Fileproject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.ProjectModel'),
        ),
    ]
